(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var toArray = exports.toArray = function toArray(arrayLike) {
  if (Array.isArray(arrayLike)) {
    return arrayLike;
  }

  if (arrayLike instanceof Node) {
    return [arrayLike];
  }

  return Array.prototype.slice.call(arrayLike);
};

var $ = exports.$ = function $(selector) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  return toArray(context.querySelectorAll.call(context, selector));
};

var selector = exports.selector = function selector(block, elem, modName, modVal) {
  return block + '__' + elem + (modName ? modVal ? '_' + modName + '_' + modVal : '_' + modName : '');
};

var buildClass = exports.buildClass = function buildClass() {
  return '.' + selector.apply(undefined, arguments);
};

var getParents = exports.getParents = function getParents(target) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

  var parents = [];
  var p = target.parentNode;

  while (p !== parent) {
    var o = p;
    parents.push(o);
    p = o.parentNode;
  }
  parents.push(parent);

  return parents;
};

var BEM = exports.BEM = function (_ref) {
  _inherits(BEM, _ref);

  function BEM(name, node) {
    _classCallCheck(this, BEM);

    var _this = _possibleConstructorReturn(this, (BEM.__proto__ || Object.getPrototypeOf(BEM)).call(this));

    _this.node = node;
    _this.name = name;
    return _this;
  }

  _createClass(BEM, [{
    key: 'elem',
    value: function elem(name, modName, modVal) {
      return this.node.querySelector(buildClass(this.name, name, modName, modVal));
    }
  }, {
    key: 'elems',
    value: function elems(name, modName, modVal) {
      var _this2 = this;

      return $(buildClass(this.name, name, modName, modVal), this.node).filter(function (node) {
        var $parents = getParents(node, _this2.node);
        var $firstBlock = $parents.filter(function (parent) {
          return parent.classList.contains(_this2.name);
        })[0];

        return $firstBlock === _this2.node;
      });
    }
  }, {
    key: 'setMod',
    value: function setMod(elem, elemName, modName, modValue) {
      var _this3 = this;

      toArray(elem).forEach(function (node) {
        return node.classList.add(selector(_this3.name, elemName, modName, modValue));
      });

      return this;
    }
  }, {
    key: 'delMod',
    value: function delMod(elem, elemName, modName) {
      var _this4 = this;

      toArray(elem).forEach(function (node) {
        return node.classList.remove(selector(_this4.name, elemName, modName));
      });

      return this;
    }
  }]);

  return BEM;
}(null);

},{}],2:[function(require,module,exports){
'use strict';

var _dom = require('./dom');

var _utils = require('./utils');

var _search = require('./search');

var _search2 = _interopRequireDefault(_search);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _utils.fetchJSON)('data/search.json').then(function (data) {
  (0, _dom.$)('.search').forEach(function (node) {
    return new _search2.default(node, data);
  });
});

},{"./dom":1,"./search":3,"./utils":4}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dom = require('./dom');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HOVER_DEBOUNCE_TIMEOUT = 200;

var createItem = function createItem(data) {
  var node = document.createElement('li');

  node.classList.add((0, _dom.selector)('search', 'result-item'));
  node.innerHTML = '\n    <div class="search__result-item-title">\n        ' + data.name + '\n    </div>\n    ' + data.address.settlement + ' <br />\n    ' + data.address.street + ', ' + data.address.building + ' <br />\n    \u0422\u0435\u043B.: ' + data.phones[0].number + ' <br />\n    \u0413\u043E\u0434\u0438\u043D\u0438 \u0440\u043E\u0431\u043E\u0442\u0438: \u041F\u043D-\u041F\u0442, 9:00-19:00\n  ';

  return node;
};

var getTooltipContent = function getTooltipContent(data) {
  return '<div class="search__map-tooltip">\n    <b>' + data.name + '</b> <br />\n    ' + data.address.settlement + ' <br />\n    ' + data.address.street + ', ' + data.address.building + ' <br />\n    \u0422\u0435\u043B.: ' + data.phones[0].number + ' <br />\n    \n    <div class="search__map-tooltip-count">\n        ' + data.doctors + '\n        <small>\u043B\u0456\u043A\u0430\u0440\u0456\u0432</small>\n    </div>\n    <div class="search__map-tooltip-count">\n        ' + data.declarations + '\n        <small>\u0434\u0435\u043A\u043B\u0430\u0440\u0430\u0446\u0456\u0439 \u043F\u0456\u0434\u043F\u0438\u0441\u0430\u043D\u043E</small>\n    </div>\n  </div>';
};

var Search = function (_BEM) {
  _inherits(Search, _BEM);

  function Search(node, data) {
    _classCallCheck(this, Search);

    var _this = _possibleConstructorReturn(this, (Search.__proto__ || Object.getPrototypeOf(Search)).call(this, 'search', node));

    _this.markers = [];
    _this.$markerNodes = [];
    _this.timeout = null;


    _this.$result = _this.elem('result');

    _this.data = data;
    _this.map = new google.maps.Map(_this.elem('map'), {
      center: { lat: 50.4021368, lng: 30.4525107 },
      zoom: 11
    });

    _this.tooltip = new google.maps.InfoWindow({
      maxWidth: 250,
      pixelOffset: new google.maps.Size(136, 388),
      zIndex: -2
    });

    var fragment = document.createDocumentFragment();

    _this.data.forEach(function (item, index) {
      var node = createItem(item);

      node.dataset.index = index;
      fragment.appendChild(node);

      var marker = _this.createMarker(item.address.coordinates);
      _this.markers.push(marker);
      _this.$markerNodes.push(node);

      marker.addListener('click', function () {
        return _this.setActive(index);
      });
      marker.addListener('mouseover', function (_ref) {
        var ta = _ref.ta;

        _this.onHoverMarker(index, 'over', ta.target);
      });
      marker.addListener('mouseout', function () {
        return _this.onHoverMarker(index, 'out');
      });
    });

    _this.$result.appendChild(fragment);

    _this.$result.addEventListener('click', function (_ref2) {
      var target = _ref2.target;

      var $item = target.closest((0, _dom.buildClass)(_this.name, 'result-item'));

      if ($item === null) {
        return;
      }

      _this.map.setCenter({
        lat: _this.data[$item.dataset.index].address.coordinates[0],
        lng: _this.data[$item.dataset.index].address.coordinates[1]
      });

      _this.map.setZoom(11);

      _this.setActive($item.dataset.index);
    }, false);

    _this.activeMarker = new google.maps.Marker({
      map: _this.map,
      zIndex: 2,
      icon: {
        url: 'images/icons/marker.png',
        scaledSize: new google.maps.Size(33, 47),
        anchor: new google.maps.Point(17, 60)
      }
    });
    return _this;
  }

  _createClass(Search, [{
    key: 'onHoverMarker',
    value: function onHoverMarker(index, type) {
      var _this2 = this;

      clearTimeout(this.timeout);
      this.timeout = setTimeout(function () {
        switch (type) {
          case 'over':
            _this2.showTooltip(index);
            break;
          case 'out':
            _this2.hideTooltip();
            break;
        }
      }, HOVER_DEBOUNCE_TIMEOUT);
    }
  }, {
    key: 'hideTooltip',
    value: function hideTooltip() {
      var _this3 = this;

      var node = this.$tooltipNode;

      if (!node) {
        return;
      }

      var player = node.animate([{ opacity: 1, transform: 'translateY(0)' }, { opacity: 0, transform: 'translateY(-20px)' }], this.constructor.ANIMATION_OPTIONS);

      var marker = this.hoverMarker;
      var size = 20;
      requestAnimationFrame(function animate() {
        if (size <= 0) {
          marker.setMap(null);
          return;
        }

        marker.setIcon(_extends({}, marker.getIcon(), { scale: size }));
        size = size - 2;
        requestAnimationFrame(animate);
      });

      player.onfinish = function () {
        _this3.tooltip.close();
      };

      this.activeIndex = -1;
    }
  }, {
    key: 'showTooltip',
    value: function showTooltip(index) {
      var _this4 = this;

      if (index === this.activeIndex) {
        return;
      }

      this.tooltip.setContent(getTooltipContent(this.data[index]));
      this.tooltip.open(this.map, this.markers[index]);

      var node = this.$tooltipNode = this.tooltipNode.parentNode;
      node.removeChild(node.firstChild);
      node.removeChild(node.lastChild);

      node.addEventListener('mouseover', function () {
        clearTimeout(_this4.timeout);
      }, false);

      node.addEventListener('mouseout', function () {
        _this4.onHoverMarker(index, 'out');
      }, false);

      if (this.hoverMarker) {
        this.hoverMarker.setMap(null);
      }

      var marker = this.hoverMarker = new google.maps.Marker({
        position: {
          lat: this.data[index].address.coordinates[0],
          lng: this.data[index].address.coordinates[1]
        },
        zIndex: -2,
        icon: {
          path: google.maps.SymbolPath.CIRCLE,
          scale: 0,
          strokeColor: '#4880ed',
          fillOpacity: 1,
          fillColor: '#4880ed'
        },
        opacity: .1,
        draggable: true,
        map: this.map
      });

      this.activeIndex = index;

      marker.addListener('mouseover', function () {
        _this4.onHoverMarker(index, 'over');
      });

      marker.addListener('mouseout', function () {
        _this4.onHoverMarker(index, 'out');
      });

      var size = 0;
      requestAnimationFrame(function animate() {
        if (size >= 20) {
          return;
        }

        marker.setIcon(_extends({}, marker.getIcon(), { scale: size }));
        size = size + 2;
        requestAnimationFrame(animate);
      });

      if (index === this.activeMarkerIndex) {
        this.tooltipNode.animate([{ opacity: 0, transform: 'translateY(0px)' }, { opacity: 1, transform: 'translateY(10px)' }], this.constructor.ANIMATION_OPTIONS);
      } else {
        this.tooltipNode.animate([{ opacity: 0, transform: 'translateY(-20px)' }, { opacity: 1, transform: 'translateY(0)' }], this.constructor.ANIMATION_OPTIONS);
      }
    }
  }, {
    key: 'setActive',
    value: function setActive(index) {
      if (index === this.activeMarkerIndex) {
        return;
      }

      var address = this.data[index].address;

      var $item = this.$markerNodes[index];

      if (index === this.activeIndex) {
        this.tooltipNode.style.top = '18px';
      }

      if (this.$active) {
        this.delMod(this.$active, 'result-item', 'active');
        this.markers[this.$active.dataset.index].setIcon(this.defaultMarkerIcon);
      }

      this.setMod($item, 'result-item', 'active');
      this.$active = $item;
      this.activeMarkerIndex = Number(index);

      this.markers[$item.dataset.index].setIcon(this.activeMarkerIcon);

      this.activeMarker.setPosition({ lat: address.coordinates[0], lng: address.coordinates[1] });
    }
  }, {
    key: 'createMarker',
    value: function createMarker(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          lat = _ref4[0],
          lng = _ref4[1];

      return new google.maps.Marker({
        position: { lat: lat, lng: lng },
        zIndex: -1,
        icon: this.defaultMarkerIcon,
        draggable: false,
        map: this.map
      });
    }
  }, {
    key: 'defaultMarkerIcon',
    get: function get() {
      return {
        path: google.maps.SymbolPath.CIRCLE,
        scale: 4,
        strokeColor: '#4880ed',
        fillOpacity: 1,
        fillColor: '#4880ed'
      };
    }
  }, {
    key: 'activeMarkerIcon',
    get: function get() {
      return {
        path: google.maps.SymbolPath.CIRCLE,
        scale: 8,
        strokeColor: '#4880ed',
        fillOpacity: 1,
        fillColor: '#ffffff',
        strokeWeight: 6
      };
    }
  }, {
    key: 'tooltipNode',
    get: function get() {
      return document.querySelector('.gm-style-iw');
    }
  }]);

  return Search;
}(_dom.BEM);

Search.ANIMATION_OPTIONS = {
  duration: 200,
  fill: 'forwards',
  easing: 'ease-in-out'
};
exports.default = Search;
module.exports = exports['default'];

},{"./dom":1}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var objectToQuery = function objectToQuery(target) {
  return '?' + Object.keys(target).reduce(function (arr, key) {
    return arr.push(key + '=' + target[key]) && arr;
  }, []).join('&');
};

var numberFormatting = exports.numberFormatting = function numberFormatting(number) {
  return number.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1 ').split('.')[0];
};

var fetchJSON = exports.fetchJSON = function fetchJSON(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { method: 'GET' };
  return new Promise(function (resolve, reject) {
    var request = new XMLHttpRequest();

    if (options.body && options.method === 'GET') {
      url += objectToQuery(options.body);
    }

    request.onreadystatechange = function () {
      if (request.readyState !== 4) {
        return;
      }

      resolve(JSON.parse(request.responseText));
    };

    request.onerror = reject;
    request.open(options.method || 'GET', url);
    request.send(options.body ? JSON.stringify(options.body) : null);
  });
};

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
